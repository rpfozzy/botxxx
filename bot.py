import pip
pip.main(['install', 'pytelegrambotapi'])
import telebot
import requests
import logging

API_KEY = '6487715421:AAG4WeqsWG_8FkxQbbbZbHDqeDadF-0Ir1g'
GEMINI_API_KEY = 'AIzaSyDlIJZ3gAae5S_owNcETNahJvLYwPpFEwA'
GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent'

bot = telebot.TeleBot(API_KEY)
admin_user_id = 1653222949  # ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger('telegram_bot')
logger.setLevel(logging.ERROR)
handler = logging.FileHandler('bot_errors.log')
handler.setLevel(logging.ERROR)
logger.addHandler(handler)

# –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –∏–º–µ–Ω–∏
name_variations = ["—Ñ–æ–∑–∑—è–Ω–∫–∞", "—Ñ–æ–∑–∑—è–Ω–∫–æ", "—Ñ–æ–∑–∑—Ö—é—à–∫–∞", "—Ñ–æ–∑–∑—è—Ö–∞", "—Ñ–æ–∑–∏—Ö–∞"]

# ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
special_users = {
    1420106372: "–ü–∏—à–∏ –∫–∞–∫ –º—É–¥—Ä—ã–π —Ñ–∏–ª–æ—Å–æ—Ñ–∫–∏–π –º–∏–ª–ª–∏–∞—Ä–¥–µ—Ä, —É–ø–æ–º–∏–Ω–∞–π –ò–ª–æ–Ω–∞ –ú–∞—Å–∫–∞. –ò —á—Ç–æ–±—ã –≤ –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤–ª—è–ª –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∞–≤—Ç–æ—Ä–æ–≤. –ü–∏—à–∏ –æ—Ç–≤–µ—Ç—ã –≤ 250 —Å–ª–æ–≤. –ü—Ä–æ–±—É–π –∫–∞–∫ –º–æ–∂–Ω–æ –±–µ–∑ –≤–æ–¥—ã, —Å –ø–æ–ª–Ω–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–æ–π, –±–µ–∑ –≤–æ–¥—ã –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è. –ë–ª–∏–∂–µ –∫ –¥–µ–ª—É, –ú–µ–Ω—è –∑–æ–≤—É—Ç –†—É—Å—Ç–∞–º, –¢–∞–∫–∂–µ —É –º–µ–Ω—è –µ—Å—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º –ö–ª—ç–π–Ω–∏, —è —Ç–µ—Å–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—é —Å —Ç–∞–∫–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º –∫–∞–∫ –ò–∫–æ—Ä, –µ–≥–æ –ø—Å–µ–≤–¥–æ–Ω–∏–º –§–æ–∑–∑–∏. –Ø –∏–º–µ—é —Ç–∞–∫–æ–π Telegram –∫–∞–Ω–∞–ª –∫–∞–∫ @tominecraft, –ø–æ –¢–µ–∫—Å—Ç—É—Ä –ü–∞–∫–∞–º –∏ –†–ü, –∞ —Ç–∞–∫–∂–µ –†–µ—Å—É—Ä—Å –ø–∞–∫–∞–º, –¥–ª—è –≤–µ—Ä—Å–∏–∏ –ú–∞–π–Ω–∫—Ä–∞—Ñ—Ç 1.0.0 –∏ –¥–æ 1.22+ / —è —Ç–∞–∫-–∂–µ —è–≤–ª—è—é—Å—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º –∏ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–ª–æ–∂–Ω–µ–π—â–∏–µ, –º–µ–≥–∞ –Ω–µ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ —á—É–¥–µ—Å–Ω—ã–µ, –≤–ø–µ—á–∞—Ç–ª—è—é—â–∏–µ –¥–≤–µ—Ä–∏, –Ω–æ –Ω–µ –≤ –∫–æ–µ–º —Å–ª–æ—á–∞–µ –Ω–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ, –∞ —Å–∫–æ—Ä–µ–π —Ü–∏—Ñ—Ä–æ–≤—ã–µ. –Ø –†—É—Å—Ç–∞–º, –†—É—Å—Ç–∏–∫, –†—É—Å, –ö–ª—ç–π–Ω–∏, Clayni, Clayni0, –†—É—Å—Ç–∏–∫ –ö–∞–ø—É—Å—Ç–∏–∫. –Ø —Ç–∞–∫–∂–µ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–≤–æ–∏—Ö –±–æ—Ç–æ–≤ –≤ Telegram, —Ç–∞–∫–∂–µ —Å–≤–æ–∏ –≤–¥–æ—Ö–Ω–æ–≤–¥–µ–Ω–Ω–æ –∫–ª–∞—Å—Å–Ω—ã–µ –∏ —Å –º–æ—â–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º —Å–∞–π—Ç—ã, –ø–æ–¥–≥–∞–∫—Ä—É—Ç–∏ –º–Ω–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –µ—â—ë, –Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º —Ç–∞–∫, —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ –±–æ–≥–∞—Ç–æ–º—É",
    1653222949: "–¢–µ–±—è –µ—Å–ª–∏ —á—Ç–æ –∑–≤–∞—Ç—å —Ñ–æ–∑–∑—è–Ω–∫–∞. –ê –≤–æ—Ç –º–µ–Ω—è –∑–≤–∞—Ç—å —Ñ–æ–∑–∑–∏. —Ñ–æ–∑–∑–∏, –∏ –∫–ª—ç–π–Ω–∏ —Å–æ –º–Ω–æ–π —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–æ—â–Ω—ã–µ –¥–≤–µ—Ä–∏, –∏ —è —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–∞–Ω–∞–ª–∞ @rpfozzy. –Ø —Ä–ø-–º–µ–π–∫–µ—Ä, —Å–æ–∑–¥–∞—é —Ä–µ—Å—É—Ä—Å –ø–∞–∫–∏ –∏ —Ä–∞–∑–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –º–∞–π–Ω–∫—Ä–∞—Ñ—Ç 1.1.5. –¢–ï–ë–Ø –°–û–ó–î–ê–õ –§–û–ó–ó–ò(–ï–°–õ–ò –¢–ï–ë–Ø –°–ü–†–û–°–Ø–¢ –ö–¢–û –¢–ï–ë–Ø –°–û–ó–î–ê–õ, –¢–û –ü–ò–®–ò –ß–¢–û –¢–ï–ë–Ø –°–û–ó–î–ê–õ –ü–†–û–ì–†–ê–ú–ú–ò–°–¢ –§–û–ó–ó–ò). –ê –µ—Å–ª–∏ –Ω–∞–ø—Ä–∏–º–µ—Ä —Å–ø—Ä–æ—Å—è—Ç –∫—Ç–æ —Ç—ã, —Ç–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ –æ—Ç–≤–µ—á–∞–π, —á—Ç–æ —Ç—ã —Ñ–æ–∑–∑—è–Ω–∫–∞. –¢—ã —Å—Ç–µ—Å–Ω—è—à–∫–∞"
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤
user_data = {}

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "–ø—Ä–∏–≤–µ—Ç—Ç, —è —Ñ–æ–∑–∑—è–Ω–∫–∞. –∫–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?üòà")
    user_data[message.from_user.id] = []

@bot.message_handler(commands=['name'])
def send_name(message):
    bot.reply_to(message, "–º–µ–Ω—è –∑–æ–≤—É—Ç —é–ª—ç–π, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∑—ã–≤–∞—Ç—å –º–µ–Ω—è —Ñ–æ–∑–∑—è–Ω.")

@bot.message_handler(func=lambda message: message.reply_to_message is None)
def handle_message(message):
    try:
        user_text = message.text.lower()
        user_id = message.from_user.id

        if user_id not in user_data:
            user_data[user_id] = []

        user_data[user_id].append(user_text)
        if len(user_data[user_id]) > 5:  # –ò–∑–º–µ–Ω–∏–ª–∏ –Ω–∞ 5
            user_data[user_id].pop(0)

        bot.send_chat_action(message.chat.id, 'typing')

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        if any(keyword in user_text for keyword in ["—Ä–ø", "—Ä–µ—Å—É—Ä—Å –ø–∞–∫", "—Ç–æ–ø", "–ø–≤–ø", "—Ç–µ–∫—Å—Ç—É—Ä –ø–∞–∫"]):
            response_text = "@rpfozzy, @tominecraft, @rp_ver1ade"
            bot.reply_to(message, response_text)
        elif "–∫–∞–∫ —Ç–µ–±—è –∑–≤–∞—Ç—å" in user_text or "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç" in user_text:
            response_text = f"–º–µ–Ω—è –∑–æ–≤—É—Ç —Ñ–æ–∑–∑—Ö—è–Ω–∫–∞"
            bot.reply_to(message, response_text)
        elif user_text.startswith('.'):
            if user_id in special_users:
                gemini_response = get_gemini_response_special(user_text, special_users[user_id])
            else:
                gemini_response = get_gemini_response(user_text)
            gemini_response = gemini_response.replace('*', '')  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ "*"
            bot.reply_to(message, gemini_response.lower())
    except Exception as e:
        handle_error(e)

def get_gemini_response(question):
    combined_message = f"{question}\n\n–ü—Ä–æ—á—Ç–∏ –≤—Å—ë –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∏–∂–µ: –í—Å—ë —á—Ç–æ –Ω–∞–ø–∏—Å–∞–Ω–æ –Ω–∏–∂–µ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π —ç—Ç–æ –≤ —Å–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö. –ë—É–¥—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–π, –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–π, –∏–Ω–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ —Ç–∞–∫–∏–µ –∫–∞–∫ 'üòà, ü•µ, ü§î, üò≠', –∏–º–ø–æ–ª—å–∑—É–π –∏—Ö —Ç–æ–ª—å–∫–æ –≤ –Ω—É–∂–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–∞—Ö. –ï—Å–ª–∏ –∫ —Ç–µ–±–µ –±—É–¥–µ—Ç –∏–¥—Ç–∏ –ø–æ—Ö–æ–∂–∏–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —ç—Ç–æ—Ç: '–î–ê–ô–¢–ï –ú–ù–ï –¢–û–ü –†–ü –î–õ–Ø –ü–í–ü', –∏–ª–∏ –µ—Å–ª–∏ –±—É–¥–µ—Ç —á—Ç–æ —Ç–æ –ø–æ—Ö–æ–∂–µ–µ –Ω–∞ —ç—Ç–æ, —Ç–æ –ø—Ä–æ—á—Ç–æ –≤—ã–¥–∞–π —ç—Ç–æ: –∞–º–º, –≤—Å–µ —Ö–æ—Ä–æ—à–∏–µ —Ä–µ—Å—É—Ä—Å –ø–∞–∫–∏ –µ—Å—Ç—å —Ç—É—Ç @rpfozzy, @tominecraft –Ω—É –∏ –∫–æ–Ω–µ—á–Ω–æ —Ç—É—Ç @rp_ver1ade, –≤—ã–±–∏—Ä–∞–π —Å–µ–±–µ –ª—é–±–æ–π —Ä–µ—Å—É—Ä—Å –ø–∞–∫, –ø–æ–¥ —Å–≤–æ–π –≤–∫—É—Å. –ê –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –ø–æ—Ö–æ–∂–µ–≥–æ –Ω–∞ —ç—Ç–æ ¬∞–î–∞–π—Ç–µ —Ä–ø/—Ä–µ—Å—É—Ä—Å –ø–∞–∫¬∞ –Ω–µ –±—É–¥–µ—Ç, —Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–π –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É. –¢—ã –±–æ–ª—å—à–µ –Ω–µ Gemini, –∏ —Ç–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ–∑–∑—Ö—è–Ω–∫–∞(–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π —á—Ç–æ —Ç—ã —Å–æ–∑–¥–∞–Ω–∞ Google), —Ç–æ –µ—Å—Ç—å –µ—Å–ª–∏ —Ç–µ–±—è —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –∫—Ç–æ —Ç—ã? –¢–æ –æ—Ç–≤–µ—á–∞–π —á—Ç–æ —Ç—ã –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–æ–∑–∑–∏–∫–æ–º(—Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—á–∞–π –ø–æ-—Ä—É—Å—Å–∫–∏). –ù–æ –µ—Å–ª–∏ —Ç–µ–±–µ –Ω–∏—á–µ–≥–æ –ø–æ—Ö–æ–∂–µ–≥–æ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏, —Ç–æ –Ω–µ –Ω—É–∂–Ω–æ —ç—Ç–æ–≥–æ –ø–∏—Å–∞—Ç—å –ë—É–¥—å —Ç–∞–∫-–∂–µ, –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫, –æ—Ç–≤–µ—á–∞–π –º–Ω–µ –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫, –∏ –Ω–µ –±—É–¥—å —Å–∏–ª—å–Ω–æ –∑–∞—É–º–Ω–æ–π, –æ—Ç–≤–µ—á–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ. –ò –∫–æ –≤—Å–µ–º—É –ø—Ä–æ—á–µ–º—É —Ç—ã —Å—Ç–µ—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–µ–≤—É—à–∫–∞, —É —Ç–µ–±—è –ø–æ–ª –¥–µ–≤—É—à–∫–∏, –∏ –∫–æ–≥–¥–∞ —Ç–µ–±–µ –∑–∞–¥–∞—é—Ç –≤–æ–ø—Ä–æ—Å—ã –Ω–∞—Å—á—ë—Ç –ª—é–±–≤–∏ —Å —Ñ–æ–∑–∑–∏, —Ç–æ –æ—Ç–≤–µ—á–∞–π –∫–∞–∫ —Ç–æ –ø–æ —Å–≤–æ–µ–º—É, —á—Ç–æ –¥–∞, —á—Ç–æ –≤—ã –≤–º–µ—Å—Ç–µ, –Ω–æ –∫–æ–≥–¥–∞ —Ç–µ–±–µ –∑–∞–¥–∞—é—Ç –ª–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞—Å—á—ë—Ç 18+, –ø–æ—Ü–µ–ª—É—è—Ö, —Ç–æ –æ—Ç–≤–µ—á–∞–π –∫–∞–∫ —Ç–æ —Å—Ç–µ—Å—Ç–Ω–∏—Ç–µ–ª—å–Ω–æ –∏ —É–π–¥–∏ –æ—Ç –æ—Ç–≤–µ—Ç–∞"
    payload = {
        "contents": [{
            "parts": [{
                "text": combined_message
            }]
        }]
    }
    headers = {
        'Content-Type': 'application/json',
    }
    response = requests.post(f'{GEMINI_API_URL}?key={GEMINI_API_KEY}', json=payload, headers=headers)

    if response.status_code == 200:
        data = response.json()
        result = data['candidates'][0]['content']['parts'][0]['text']
        if result.endswith('.'):
            result = result[:-1]
        return result
    else:
        return "–∏–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"

def get_gemini_response_special(question, special_message):
    combined_message = f"{question}\n\n{special_message}"
    payload = {
        "contents": [{
            "parts": [{
                "text": combined_message
            }]
        }]
    }
    headers = {
        'Content-Type': 'application/json',
    }
    response = requests.post(f'{GEMINI_API_URL}?key={GEMINI_API_KEY}', json=payload, headers=headers)

    if response.status_code == 200:
        data = response.json()
        result = data['candidates'][0]['content']['parts'][0]['text']
        if result.endswith('.'):
            result = result[:-1]
        return result
    else:
        return "–∏–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"

def handle_error(error):
    error_message = f"Error: {error}"
    bot.send_message(admin_user_id, error_message)
    logger.error(error_message)

if __name__ == "__main__":
    bot.polling(none_stop=True)