import pip
pip.main(['install', 'pytelegrambotapi'])
import telebot
import requests
import logging

API_KEY = '6487715421:AAG4WeqsWG_8FkxQbbbZbHDqeDadF-0Ir1g'
GEMINI_API_KEY = 'AIzaSyDlIJZ3gAae5S_owNcETNahJvLYwPpFEwA'
GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent'

bot = telebot.TeleBot(API_KEY)
admin_user_id = 1653222949  # ID to send error messages to

# Logging setup
logger = logging.getLogger('telegram_bot')
logger.setLevel(logging.ERROR)
handler = logging.FileHandler('bot_errors.log')
handler.setLevel(logging.ERROR)
logger.addHandler(handler)

# –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –∏–º–µ–Ω–∏
name_variations = ["—Ñ–æ–∑–∑—è–Ω–∫–∞", "—Ñ–æ–∑–∑—è–Ω–∫–æ", "—Ñ–æ–∑–∑—Ö—é—à–∫–∞", "—Ñ–æ–∑–∑—è—Ö–∞", "—Ñ–æ–∑–∏—Ö–∞"]

# ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
special_users = {
    1420106372: "–ü–∏—à–∏ –∫–∞–∫ –º—É–¥—Ä—ã–π —Ñ–∏–ª–æ—Å–æ—Ñ–∫–∏–π –º–∏–ª–ª–∏–∞—Ä–¥–µ—Ä, —É–ø–æ–º–∏–Ω–∞–π –ò–ª–æ–Ω–∞ –ú–∞—Å–∫–∞...",
    1653222949: "–¢–µ–±—è –µ—Å–ª–∏ —á—Ç–æ –∑–≤–∞—Ç—å —Ñ–æ–∑–∑—è–Ω–∫–∞...",
    893032579: "–ú–æ–π –Ω–∏–∫ –º–æ—Ä–¥–µ—Ä, —Å–Ω–∏–º–∞—é –≤–∏–¥–µ–æ –Ω–∞ —é—Ç—É–±...",
    6183589990: "–Ø –∫–∏—Ä–∞—à–µ –∏ —è –ª—é–±–ª—é –∂—Ä–∞—Ç—å –∫–∏—Ä–∏–µ—à–∫–∏..."
}

# Mapping emojis to stickers
emoji_to_sticker = {
    'üòà': 'CAACAgIAAxkBAAIC8GayPLTnct0k1rsAATrQWP6RsSrLagACmU4AAulVBRigbZsBxiXpWTUE',
    'ü•µ': 'CAACAgIAAxkBAAIC82ayPWDFsw2aUj_6pYvnObIHfZoJAAK6KwACqvRgSfiKwDjqorIbNQQ',
    'ü§î': 'CAACAgIAAxkBAAIC9WayPY0aVMThwG3LRDARDSphdh-AAAIZAANJP2IvFQABKgABzS0qCDUE',
    'üò≠': 'CAACAgIAAxkBAAIC92ayPcOEbr_s6oIC8lLfgRbaY7KJAAJlLwACAj6xSfJX_oG4xJ_qNQQ',
    'ü§©': 'CAACAgUAAxkBAAIC-WayPd-GklLsGyH6b4sXyYYxd2v0AAKfBQACKn7JVIc8uG7rfTNzNQQ'
}

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "–ø—Ä–∏–≤–µ—Ç—Ç, —è —Ñ–æ–∑–∑—è–Ω–∫–∞. –∫–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?üòà")

@bot.message_handler(commands=['name'])
def send_name(message):
    bot.reply_to(message, "–º–µ–Ω—è –∑–æ–≤—É—Ç —é–ª—ç–π, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∑—ã–≤–∞—Ç—å –º–µ–Ω—è —Ñ–æ–∑–∑—è–Ω.")

@bot.message_handler(func=lambda message: message.reply_to_message is None)
def handle_message(message):
    try:
        user_text = message.text.lower()
        user_id = message.from_user.id

        bot.send_chat_action(message.chat.id, 'typing')  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç"

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        if any(keyword in user_text for keyword in ["—Ä–ø", "—Ä–µ—Å—É—Ä—Å –ø–∞–∫", "—Ç–æ–ø", "–ø–≤–ø", "—Ç–µ–∫—Å—Ç—É—Ä –ø–∞–∫"]):
            response_text = "@rpfozzy, @tominecraft, @rp_ver1ade"
            bot.reply_to(message, response_text)
        elif "–∫–∞–∫ —Ç–µ–±—è –∑–≤–∞—Ç—å" in user_text or "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç" in user_text:
            response_text = f"–º–µ–Ω—è –∑–æ–≤—É—Ç —Ñ–æ–∑–∑—Ö—è–Ω–∫–∞"
            bot.reply_to(message, response_text)
        elif user_text.startswith('.'):
            if user_id in special_users:
                gemini_response = get_gemini_response_special(user_text, special_users[user_id])
            else:
                gemini_response = get_gemini_response(user_text)
            gemini_response = gemini_response.replace('*', '')  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ "*"
            bot.reply_to(message, gemini_response.lower())

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞, –µ—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –Ω–∞–π–¥–µ–Ω—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏
            send_stickers_based_on_emojis(gemini_response, message.chat.id)
    except Exception as e:
        handle_error(e)

def get_gemini_response(question):
    combined_message = f"{question}\n\n–ü—Ä–æ—á—Ç–∏ –≤—Å—ë –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∏–∂–µ: –í—Å—ë —á—Ç–æ –Ω–∞–ø–∏—Å–∞–Ω–æ –Ω–∏–∂–µ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π —ç—Ç–æ –≤ —Å–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö..."
    
    payload = {
        "contents": [{
            "parts": [{
                "text": combined_message
            }]
        }]
    }
    headers = {
        'Content-Type': 'application/json',
    }
    response = requests.post(f'{GEMINI_API_URL}?key={GEMINI_API_KEY}', json=payload, headers=headers)

    if response.status_code == 200:
        data = response.json()
        result = data['candidates'][0]['content']['parts'][0]['text']

        # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ —Ç–µ–∫—Å—Ç–∞
        if result.endswith('.'):
            result = result[:-1]

        return result
    else:
        return "–∏–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"

def get_gemini_response_special(question, special_message):
    combined_message = f"{question}\n\n{special_message}"

    payload = {
        "contents": [{
            "parts": [{
                "text": combined_message
            }]
        }]
    }
    headers = {
        'Content-Type': 'application/json',
    }
    response = requests.post(f'{GEMINI_API_URL}?key={GEMINI_API_KEY}', json=payload, headers=headers)

    if response.status_code == 200:
        data = response.json()
        result = data['candidates'][0]['content']['parts'][0]['text']

        # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ —Ç–µ–∫—Å—Ç–∞
        if result.endswith('.'):
            result = result[:-1]

        return result
    else:
        return "–∏–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"

def send_stickers_based_on_emojis(response, chat_id):
    for emoji, sticker_id in emoji_to_sticker.items():
        if emoji in response:
            bot.send_sticker(chat_id, sticker_id)

def handle_error(error):
    error_message = f"Error: {error}"
    bot.send_message(admin_user_id, error_message)
    logger.error(error_message)

if __name__ == "__main__":
    bot.polling(none_stop=True)