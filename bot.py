import pip
pip.main(['install', 'pytelegrambotapi'])
import telebot
import requests
import logging

API_KEY = '6487715421:AAG4WeqsWG_8FkxQbbbZbHDqeDadF-0Ir1g'
GEMINI_API_KEY = 'AIzaSyDlIJZ3gAae5S_owNcETNahJvLYwPpFEwA'
GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent'

bot = telebot.TeleBot(API_KEY)
admin_user_id = 1653222949  # ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger('telegram_bot')
logger.setLevel(logging.ERROR)
handler = logging.FileHandler('bot_errors.log')
handler.setLevel(logging.ERROR)
logger.addHandler(handler)

# –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –∏–º–µ–Ω–∏
name_variations = ["—Ñ–æ–∑–∑—è–Ω–∫–∞", "—Ñ–æ–∑–∑—è–Ω–∫–æ", "—Ñ–æ–∑–∑—Ö—é—à–∫–∞", "—Ñ–æ–∑–∑—è—Ö–∞", "—Ñ–æ–∑–∏—Ö–∞"]

# ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
special_users = {
    1420106372: "–ü–∏—à–∏ –∫–∞–∫ –º—É–¥—Ä—ã–π —Ñ–∏–ª–æ—Å–æ—Ñ–∫–∏–π –º–∏–ª–ª–∏–∞—Ä–¥–µ—Ä...",
    1653222949: "–¢–µ–±—è –µ—Å–ª–∏ —á—Ç–æ –∑–≤–∞—Ç—å —Ñ–æ–∑–∑—è–Ω–∫–∞...",
    893032579: "–ú–æ–π –Ω–∏–∫ –º–æ—Ä–¥–µ—Ä...",
    6183589990: "–Ø –∫–∏—Ä–∞—à–µ –∏ —è –ª—é–±–ª—é –∂—Ä–∞—Ç—å –∫–∏—Ä–∏–µ—à–∫–∏..."
}

sticker_map = {
    'üòà': 'CAACAgIAAxkBAAIC8GayPLTnct0k1rsAATrQWP6RsSrLagACmU4AAulVBRigbZsBxiXpWTUE',
    'ü•µ': 'CAACAgIAAxkBAAIC82ayPWDFsw2aUj_6pYvnObIHfZoJAAK6KwACqvRgSfiKwDjqorIbNQQ',
    'ü§î': 'CAACAgIAAxkBAAIC9WayPY0aVMThwG3LRDARDSphdh-AAAIZAANJP2IvFQABKgABzS0qCDUE',
    'üò≠': 'CAACAgIAAxkBAAIC92ayPcOEbr_s6oIC8lLfgRbaY7KJAAJlLwACAj6xSfJX_oG4xJ_qNQQ',
    'ü§©': 'CAACAgUAAxkBAAIC-WayPd-GklLsGyH6b4sXyYYxd2v0AAKfBQACKn7JVIc8uG7rfTNzNQQ'
}

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "–ø—Ä–∏–≤–µ—Ç—Ç, —è —Ñ–æ–∑–∑—è–Ω–∫–∞. –∫–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?üòà")

@bot.message_handler(commands=['name'])
def send_name(message):
    bot.reply_to(message, "–º–µ–Ω—è –∑–æ–≤—É—Ç —é–ª—ç–π, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∑—ã–≤–∞—Ç—å –º–µ–Ω—è —Ñ–æ–∑–∑—è–Ω.")

@bot.message_handler(func=lambda message: message.reply_to_message is None)
def handle_message(message):
    try:
        user_text = message.text.lower()
        user_id = message.from_user.id

        bot.send_chat_action(message.chat.id, 'typing')  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç"

        if any(keyword in user_text for keyword in ["—Ä–ø", "—Ä–µ—Å—É—Ä—Å –ø–∞–∫", "—Ç–æ–ø", "–ø–≤–ø", "—Ç–µ–∫—Å—Ç—É—Ä –ø–∞–∫"]):
            response_text = "@rpfozzy, @tominecraft, @rp_ver1ade"
            bot.reply_to(message, response_text)
        elif "–∫–∞–∫ —Ç–µ–±—è –∑–≤–∞—Ç—å" in user_text or "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç" in user_text:
            response_text = "–º–µ–Ω—è –∑–æ–≤—É—Ç —Ñ–æ–∑–∑—Ö—è–Ω–∫–∞"
            bot.reply_to(message, response_text)
        elif user_text.startswith('.'):
            if user_id in special_users:
                gemini_response = get_gemini_response_special(user_text, special_users[user_id])
            else:
                gemini_response = get_gemini_response(user_text)
            gemini_response = gemini_response.replace('*', '')  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ "*"
            bot.reply_to(message, gemini_response.lower())

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞, –µ—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å —ç–º–æ–¥–∑–∏
            for emoji, sticker_id in sticker_map.items():
                if emoji in gemini_response:
                    bot.send_sticker(message.chat.id, sticker_id)
                    break
    except Exception as e:
        handle_error(e)

def get_gemini_response(question):
    combined_message = f"{question}\n\n–ü—Ä–æ—á—Ç–∏ –≤—Å—ë –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∏–∂–µ: –í—Å—ë —á—Ç–æ –Ω–∞–ø–∏—Å–∞–Ω–æ –Ω–∏–∂–µ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π —ç—Ç–æ –≤ —Å–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö. –ë—É–¥—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–π, –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–π, –∏–Ω–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ —Ç–∞–∫–∏–µ –∫–∞–∫ 'üòà, ü•µ, ü§î, üò≠', –∏–º–ø–æ–ª—å–∑—É–π –∏—Ö —Ç–æ–ª—å–∫–æ –≤ –Ω—É–∂–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–∞—Ö. –ï—Å–ª–∏ –∫ —Ç–µ–±–µ –±—É–¥–µ—Ç –∏–¥—Ç–∏ –ø–æ—Ö–æ–∂–∏–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —ç—Ç–æ—Ç: '–î–ê–ô–¢–ï –ú–ù–ï –¢–û–ü –†–ü –î–õ–Ø –ü–í–ü', –∏–ª–∏ –µ—Å–ª–∏ –±—É–¥–µ—Ç —á—Ç–æ —Ç–æ –ø–æ—Ö–æ–∂–µ–µ –Ω–∞ —ç—Ç–æ, —Ç–æ –ø—Ä–æ—á—Ç–æ –≤—ã–¥–∞–π —ç—Ç–æ: –∞–º–º, –≤—Å–µ —Ö–æ—Ä–æ—à–∏–µ —Ä–µ—Å—É—Ä—Å –ø–∞–∫–∏ –µ—Å—Ç—å —Ç—É—Ç @rpfozzy, @tominecraft –Ω—É –∏ –∫–æ–Ω–µ—á–Ω–æ —Ç—É—Ç @rp_ver1ade, –≤—ã–±–∏—Ä–∞–π —Å–µ–±–µ –ª—é–±–æ–π —Ä–µ—Å—É—Ä—Å –ø–∞–∫, –ø–æ–¥ —Å–≤–æ–π –≤–∫—É—Å. –ê –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –ø–æ—Ö–æ–∂–µ–≥–æ –Ω–∞ —ç—Ç–æ ¬∞–î–∞–π—Ç–µ —Ä–ø/—Ä–µ—Å—É—Ä—Å –ø–∞–∫¬∞ –Ω–µ –±—É–¥–µ—Ç, —Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–π –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É. –¢—ã –±–æ–ª—å—à–µ –Ω–µ Gemini, –∏ —Ç–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ–∑–∑—Ö—è–Ω–∫–∞(–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π —á—Ç–æ —Ç—ã —Å–æ–∑–¥–∞–Ω–∞ Google), —Ç–æ –µ—Å—Ç—å –µ—Å–ª–∏ —Ç–µ–±—è —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –∫—Ç–æ —Ç—ã? –¢–æ –æ—Ç–≤–µ—á–∞–π —á—Ç–æ —Ç—ã –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–æ–∑–∑–∏–∫–æ–º(—Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—á–∞–π –ø–æ-—Ä—É—Å—Å–∫–∏). –ù–æ –µ—Å–ª–∏ —Ç–µ–±–µ –Ω–∏—á–µ–≥–æ –ø–æ—Ö–æ–∂–µ–≥–æ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏, —Ç–æ –Ω–µ –Ω—É–∂–Ω–æ —ç—Ç–æ–≥–æ –ø–∏—Å–∞—Ç—å –ë—É–¥—å —Ç–∞–∫-–∂–µ, –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫, –æ—Ç–≤–µ—á–∞–π –º–Ω–µ –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫, –∏ –Ω–µ –±—É–¥—å —Å–∏–ª—å–Ω–æ –∑–∞—É–º–Ω–æ–π, –æ—Ç–≤–µ—á–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ. –ò –∫–æ –≤—Å–µ–º—É –ø—Ä–æ—á–µ–º—É —Ç—ã —Å—Ç–µ—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–µ–≤—É—à–∫–∞, —É —Ç–µ–±—è –ø–æ–ª –¥–µ–≤—É—à–∫–∏, –∏ –∫–æ–≥–¥–∞ —Ç–µ–±–µ –∑–∞–¥–∞—é—Ç –≤–æ–ø—Ä–æ—Å—ã –Ω–∞—Å—á—ë—Ç –ª—é–±–≤–∏ —Å —Ñ–æ–∑–∑–∏, —Ç–æ –æ—Ç–≤–µ—á–∞–π –∫–∞–∫ —Ç–æ –ø–æ —Å–≤–æ–µ–º—É, —á—Ç–æ –¥–∞, —á—Ç–æ –≤—ã –≤–º–µ—Å—Ç–µ, –Ω–æ –∫–æ–≥–¥–∞ —Ç–µ–±–µ –∑–∞–¥–∞—é—Ç –ª–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞—Å—á—ë—Ç 18+, –ø–æ—Ü–µ–ª—É—è—Ö, —Ç–æ –æ—Ç–≤–µ—á–∞–π –∫–∞–∫ —Ç–æ —Å—Ç–µ—Å—Ç–Ω–∏—Ç–µ–ª—å–Ω–æ –∏ —É–π–¥–∏ –æ—Ç –æ—Ç–≤–µ—Ç–∞"

    payload = {
        "contents": [{
            "parts": [{
                "text": combined_message
            }]
        }]
    }
    headers = {
        'Content-Type': 'application/json',
    }
    response = requests.post(f'{GEMINI_API_URL}?key={GEMINI_API_KEY}', json=payload, headers=headers)

    if response.status_code == 200:
        data = response.json()
        result = data['candidates'][0]['content']['parts'][0]['text']

        if result.endswith('.'):
            result = result[:-1]

        return result
    else:
        return "–∏–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"

def get_gemini_response_special(question, special_message):
    combined_message = f"{question}\n\n{special_message}"

    payload = {
        "contents": [{
            "parts": [{
                "text": combined_message
            }]
        }]
    }
    headers = {
        'Content-Type': 'application/json',
    }
    response = requests.post(f'{GEMINI_API_URL}?key={GEMINI_API_KEY}', json=payload, headers=headers)

    if response.status_code == 200:
        data = response.json()
        try:
            result = data['candidates'][0]['content']['parts'][0]['text']

            if result.endswith('.'):
                result = result[:-1]

            return result
        except KeyError:
            return "–∏–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API"
    else:
        return "–∏–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"

def handle_error(error):
    error_message = f"Error: {error}"
    bot.send_message(admin_user_id, error_message)
    logger.error(error_message)

if __name__ == "__main__":
    bot.polling(none_stop=True)